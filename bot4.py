# -*- coding: utf-8 -*-
import os
import sqlite3
import google.generativeai as genai
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
import asyncio

# —Ç–æ–∫–µ–Ω –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
bot = Bot(token='7902578807:AAGLO2gRKdhZuov5PfyY8ttxyaUCW-VCxfI')
dp = Dispatcher(bot)

#  –∫–æ–æ–Ω–µ–∫—Ç –∫ –±–¥
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        weight REAL,
        height REAL,
        birth_year INTEGER,
        language TEXT DEFAULT '–†—É—Å—Å–∫–∏–π'
    )
''')
conn.commit()

# –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
genai.configure(api_key='AIzaSyDDMZ55RyEfWOngbg_N61gbhoOHq8_gQZ0')
generation_config = {
    "temperature": 2,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-002",
    generation_config=generation_config,
)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}


def is_user_registered(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

def get_user_language(user_id):
    cursor.execute('SELECT language FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else '–†—É—Å—Å–∫–∏–π'

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
async def send_message_with_language(user_id, message_dict, reply_markup=None):
    user_language = get_user_language(user_id)
    message = message_dict.get(user_language, message_dict['English'])
    await bot.send_message(user_id, message, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            'English': "Welcome! You are already registered.",
            'Kazakh': "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑–¥–µ—Ä! –°—ñ–∑ “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£—ñ–∑."
        })
        await send_main_menu(user_id)
    else:
        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.",
            'English': "Welcome! Please choose your language.",
            'Kazakh': "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑–¥–µ—Ä! –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑."
        }, reply_markup=language_menu()) 

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫"))
    keyboard.add(KeyboardButton(text="English üá¨üáß"))
    keyboard.add(KeyboardButton(text="Kazakh üá∞üáø"))
    return keyboard

@dp.message_handler(lambda message: message.text in ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß", "Kazakh üá∞üáø"])
async def choose_language(message: types.Message):
    user_id = message.from_user.id
    language = '–†—É—Å—Å–∫–∏–π' if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else 'English' if message.text == "English üá¨üáß" else 'Kazakh'
    
    cursor.execute('INSERT OR REPLACE INTO users (user_id, language) VALUES (?, ?)', (user_id, language))
    conn.commit()
    
    await send_message_with_language(user_id, {
        '–†—É—Å—Å–∫–∏–π': "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
        'English': "You have chosen English.",
        'Kazakh': "–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑."
    })
    
    await ask_for_name(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
async def ask_for_name(user_id):
    await send_message_with_language(user_id, {
        '–†—É—Å—Å–∫–∏–π': "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        'English': "What is your name?",
        'Kazakh': "–°–µ–Ω—ñ“£ –∞—Ç—ã“£ –∫—ñ–º?"
    })
    user_states[user_id] = 'awaiting_name'

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_name')
async def process_name(message: types.Message):
    user_id = message.from_user.id
    name = message.text
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('UPDATE users SET name = ? WHERE user_id = ?', (name, user_id))
    conn.commit()
    
    await send_message_with_language(user_id, {
        '–†—É—Å—Å–∫–∏–π': "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?",
        'English': "What is your weight (in kg)?",
        'Kazakh': "–°–µ–Ω—ñ“£ —Å–∞–ª–º–∞“ì—ã“£ “õ–∞–Ω—à–∞ (–∫–≥)?"
    })
    
    user_states[user_id] = 'awaiting_weight'

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_weight')
async def process_weight(message: types.Message):
    user_id = message.from_user.id
    try:
        weight = float(message.text)
        cursor.execute('UPDATE users SET weight = ? WHERE user_id = ?', (weight, user_id))
        conn.commit()

        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?",
            'English': "What is your height (in cm)?",
            'Kazakh': "–°–µ–Ω—ñ“£ –±–æ–π—ã“£ “õ–∞–Ω—à–∞ (—Å–º)?"
        })
        user_states[user_id] = 'awaiting_height'
    except ValueError:
        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥.",
            'English': "Please enter a valid weight in kg.",
            'Kazakh': "–ó–µ–π—ñ–Ω–¥—ñ –¥“±—Ä—ã—Å —Å–∞–ª–º–∞“õ—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑."
        })

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_height')
async def process_height(message: types.Message):
    user_id = message.from_user.id
    try:
        height = float(message.text)
        cursor.execute('UPDATE users SET height = ? WHERE user_id = ?', (height, user_id))
        conn.commit()

        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–ö–∞–∫–æ–π –≥–æ–¥ —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
            'English': "What is your year of birth?",
            'Kazakh': "–°–µ–Ω—ñ“£ —Ç—É—ã–ª“ì–∞–Ω –∂—ã–ª—ã“£ “õ–∞–Ω–¥–∞–π?"
        })
        user_states[user_id] = 'awaiting_birth_year'
    except ValueError:
        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º.",
            'English': "Please enter a valid height in cm.",
            'Kazakh': "–ó–µ–π—ñ–Ω–¥—ñ –¥“±—Ä—ã—Å –±–æ–π—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑."
        })

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_birth_year')
async def process_birth_year(message: types.Message):
    user_id = message.from_user.id
    try:
        birth_year = int(message.text)
        cursor.execute('UPDATE users SET birth_year = ? WHERE user_id = ?', (birth_year, user_id))
        conn.commit()

        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            'English': "Registration completed!",
            'Kazakh': "–¢—ñ—Ä–∫–µ–ª—É –∞—è“õ—Ç–∞–ª–¥—ã!"
        })
        
        user_states.pop(user_id, None)

        # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–æ–º
        await send_main_menu(user_id)
    except ValueError:
        await send_message_with_language(user_id, {
            '–†—É—Å—Å–∫–∏–π': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.",
            'English': "Please enter a valid year of birth.",
            'Kazakh': "–ó–µ–π—ñ–Ω–¥—ñ –¥“±—Ä—ã—Å —Ç—É—ã–ª“ì–∞–Ω –∂—ã–ª—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑."
        })

async def send_main_menu(user_id):
    user_language = get_user_language(user_id)

    buttons = {
        '–†—É—Å—Å–∫–∏–π': [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å"), KeyboardButton(text="–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        'English': [KeyboardButton(text="Request"), KeyboardButton(text="Change language"), KeyboardButton(text="Change data")],
        'Kazakh': [KeyboardButton(text="–°“±—Ä–∞—É"), KeyboardButton(text="–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É"), KeyboardButton(text="–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ ”©–∑–≥–µ—Ä—Ç—É")]
    }

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons[user_language])

    await bot.send_message(user_id, {
        '–†—É—Å—Å–∫–∏–π': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'English': "Choose what u want:",
        'Kazakh': "”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑::"
    }[user_language], reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["–°–º–µ–Ω–∞ —è–∑—ã–∫–∞", "Change language", "–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É"])
async def set_language(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="English", callback_data="lang_en"),
        InlineKeyboardButton(text="Kazakh", callback_data="lang_kz")
    ]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose a language / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=keyboard)

@dp.callback_query_handler(lambda callback: callback.data.startswith("lang_"))
async def language_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang_code = callback.data.split("_")[1]
    language_map = {
        "ru": "–†—É—Å—Å–∫–∏–π",
        "en": "English",
        "kz": "Kazakh"
    }
    
    cursor.execute('UPDATE users SET language = ? WHERE user_id = ?', (language_map[lang_code], user_id))
    conn.commit()

    await send_message_with_language(user_id, {
        '–†—É—Å—Å–∫–∏–π': "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
        'English': "Language changed successfully!",
        'Kazakh': "–¢—ñ–ª —Å”ô—Ç—Ç—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ!"
    })

    await send_main_menu(user_id)
@dp.message_handler(lambda message: message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "Change data", "–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ ”©–∑–≥–µ—Ä—Ç—É"])
async def update_user_info(message: types.Message):
    user_id = message.from_user.id
    language = get_user_language(user_id)
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if language == '–†—É—Å—Å–∫–∏–π':
        buttons = [
            InlineKeyboardButton(text="–ò–º—è", callback_data="update_name"),
            InlineKeyboardButton(text="–í–µ—Å", callback_data="update_weight"),
            InlineKeyboardButton(text="–†–æ—Å—Ç", callback_data="update_height"),
            InlineKeyboardButton(text="–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="update_birth_year")
        ]
        keyboard.add(*buttons)
        await bot.send_message(user_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
        
    elif language == 'English':
        buttons = [
            InlineKeyboardButton(text="Name", callback_data="update_name"),
            InlineKeyboardButton(text="Weight", callback_data="update_weight"),
            InlineKeyboardButton(text="Height", callback_data="update_height"),
            InlineKeyboardButton(text="Year of birth", callback_data="update_birth_year")
        ]
        keyboard.add(*buttons)
        await bot.send_message(user_id, "What would you like to change?", reply_markup=keyboard)
    
    elif language == 'Kazakh':
        buttons = [
            InlineKeyboardButton(text="–ê—Ç—ã", callback_data="update_name"),
            InlineKeyboardButton(text="–°–∞–ª–º–∞“õ", callback_data="update_weight"),
            InlineKeyboardButton(text="–ë–∏—ñ–∫—Ç—ñ–∫", callback_data="update_height"),
            InlineKeyboardButton(text="–¢—É“ì–∞–Ω –∂—ã–ª—ã", callback_data="update_birth_year")
        ]
        keyboard.add(*buttons)
        await bot.send_message(user_id, "–°—ñ–∑ –Ω–µ–Ω—ñ ”©–∑–≥–µ—Ä—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data in ["update_name", "update_weight", "update_height", "update_birth_year"])
async def process_callback_change_info(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    language = get_user_language(user_id)
    data = callback_query.data

    if data == "update_name":
        user_states[user_id] = 'awaiting_name'
        if language == '–†—É—Å—Å–∫–∏–π':
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        elif language == 'English':
            await bot.send_message(user_id, "Enter new name:")
        elif language == 'Kazakh':
            await bot.send_message(user_id, "–ñ–∞“£–∞ –∞—Ç –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

    elif data == "update_weight":
        user_states[user_id] = 'awaiting_weight'
        if language == '–†—É—Å—Å–∫–∏–π':
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å:")
        elif language == 'English':
            await bot.send_message(user_id, "Enter new weight:")
        elif language == 'Kazakh':
            await bot.send_message(user_id, "–ñ–∞“£–∞ —Å–∞–ª–º–∞“õ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

    elif data == "update_height":
        user_states[user_id] = 'awaiting_height'
        if language == '–†—É—Å—Å–∫–∏–π':
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç:")
        elif language == 'English':
            await bot.send_message(user_id, "Enter new height:")
        elif language == 'Kazakh':
            await bot.send_message(user_id, "–ñ–∞“£–∞ –±–æ–π –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

    elif data == "update_birth_year":
        user_states[user_id] = 'awaiting_birth_year'
        if language == '–†—É—Å—Å–∫–∏–π':
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")
        elif language == 'English':
            await bot.send_message(user_id, "Enter new birth year:")
        elif language == 'Kazakh':
            await bot.send_message(user_id, "–ñ–∞“£–∞ —Ç—É“ì–∞–Ω –∂—ã–ª –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

# "–ó–∞–ø—Ä–æ—Å"
@dp.message_handler(lambda message: message.text in ["–ó–∞–ø—Ä–æ—Å", "Request", "–°“±—Ä–∞—É"])
async def handle_request(message: types.Message):
    user_id = message.from_user.id
    language = get_user_language(user_id)

    if language == '–†—É—Å—Å–∫–∏–π':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    elif language == 'English':
        await message.answer("Enter the text to generate.")
    elif language == 'Kazakh':
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è “Ø—à—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")

    user_states[user_id] = 'awaiting_prompt'

# –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini
@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_prompt')
async def gemini_handler(message: types.Message):
    user_id = message.from_user.id
    language = get_user_language(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user_data = get_user_data_from_db(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data:
        name = user_data.get('name')
        birth_year = user_data.get('birth_year')
        weight = user_data.get('weight')
        height = user_data.get('height')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = (f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}, —è —Ä–æ–¥–∏–ª—Å—è –≤ {birth_year} –≥–æ–¥—É, –º–æ–π –≤–µ—Å {weight} –∫–≥ –∏ —Ä–æ—Å—Ç {height} —Å–º. "
                     "–ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ, —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.\n")
    else:
        user_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ.\n"

    try:
        # –ü—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = message.text

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º
        full_prompt = user_info + prompt
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
        response = model.generate_content(full_prompt)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response.text)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if language == '–†—É—Å—Å–∫–∏–π':
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        elif language == 'English':
            await message.answer(f"An error occurred while generating the response: {str(e)}")
        elif language == 'Kazakh':
            await message.answer(f"–ñ–∞—É–∞–ø—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –±–æ–ª–¥—ã: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        user_states.pop(user_id, None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
def get_user_data_from_db(user_id):
    # –ó–¥–µ—Å—å —Ç—ã –±—É–¥–µ—à—å –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –∏–ª–∏ –¥—Ä—É–≥–æ–π, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    query = "SELECT name, birth_year, weight, height FROM users WHERE user_id = ?"
    cursor.execute(query, (user_id,))
    result = cursor.fetchone()
    
    if result:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–æ–≤–∞—Ä—å
        return {
            'name': result[0],
            'birth_year': result[1],
            'weight': result[2],
            'height': result[3]
        }
    return None


# –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
